<!DOCTYPE html>
<html lang="en">

<head>
  <title>Liked Posts</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="/css/post-structure.css">
  <!-- <link rel="stylesheet" href="/css/index.css">
  <link rel="stylesheet" href="/css/add-index.css"> -->
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
  <script src="/js/posts.js"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Bitter:ital,wght@0,100..900;1,100..900&family=Playfair+Display:ital,wght@0,400..900;1,400..900&family=Satisfy&display=swap');
    *{
        margin: 0;
        padding: 0;
    }
    body{
        display: flex;
        font-family: Bitter;
    }
    /* loader */
    #loading-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0, 0, 0, 0.7);
      z-index: 9999;
      color: #fff;
      font-size: 1.5rem;
      align-items: center;
      justify-content: center;
    }

    /* From Uiverse.io by Lmickk2 */
    .loader {
      display: flex;
      transition: all 0.4s;
    }

    .loader div {
      margin-left: 0.8rem;
      background-color: rgb(34, 34, 34);
      box-shadow: inset 2px 2px 10px black;
      border-radius: 100%;
      height: 1rem;
      width: 1rem;
    }

    .box-load1 {
      animation: brighten 1.2s infinite;
    }

    .box-load2 {
      animation: brighten 1.2s infinite;
      animation-delay: .2s;
    }

    .box-load3 {
      animation: brighten 1.2s infinite;
      animation-delay: .4s;
    }

    @keyframes brighten {
      100% {
        background-color: rgb(165, 165, 165);
        box-shadow: none;
      }
    }
    nav{
        display: flex;
    background-color: #0e1113;
    width: 100%;
    height: 60px;
    color: white;
    position: fixed;
    z-index: 10;
    align-items: center;
    gap: 10px;
    padding-left: 26px;
    }
    .content{
  display: flex;
    flex-wrap: wrap;
    width: 100%;
    height: auto;
    background-color: #202020;
    align-items: center;
    justify-content: center;
    position: relative;
    flex-direction: column;
    margin-top: 60px;
}
  </style>
</head>

<body>
    <nav>
        <svg xmlns="http://www.w3.org/2000/svg" width="22.769" height="14.821" onclick="window.location.href='/'">
            <path d="M10.212 12.007 7.645 9.414h15.124v-4H7.62l2.585-2.586L7.377 0 0 7.378l7.37 7.443 2.842-2.814z" fill="#ffffff"/>
        </svg>
        <h2>Liked</h2>
    </nav>
  

  <div id="posts" class="content">
    <% posts.forEach(post => { %>
    <div class="post-card">
      <div class="card-head">
        <div class="card-author" style="display: flex; align-items: center;" onclick="redirectToProfile('<%= post.author %>')">
          <img src="/icons/profile.gif" alt="">
          &nbsp;&nbsp;/<%= post.author %>&nbsp;&nbsp;&nbsp;<p style="font-size:10px;"> <%= timeAgo(post.uploadTime) %> </p>
        </div>
      </div>
      <div class="card-title">
        <h3 id="post-title" onclick="loadpostdetails('<%= post._id %>')">
          <a href='#' style="text-decoration: none; color: inherit;">
            <%= post.title %>
          </a>
        </h3>
      </div>
      <% if (post.images.length > 0) { %>
      <div class="img-container">
        <% if (post.images.length > 1) { %>
        <button class="slider-btn s-l" onclick="prevImage('<%= post._id %>')">&#10094;</button>
        <% } %>
        <img id="img-<%= post._id %>" src="<%= post.images[0].src %>" alt="Click to Retry" data-images='<%= JSON.stringify(post.images.map(img => img.src)) %>' onclick="openFullscreenImage('<%= post._id %>')" loading="lazy">
        <% if (post.images.length > 1) { %>
        <button class="slider-btn s-r" onclick="nextImage('<%= post._id %>')">&#10095;</button>
        <% } %>
      </div>
      <% } else { %>
      <p>No attachments found for this post.</p>
      <% } %>
      <div class="card-interaction">
        <div class="c-i-left">
          <div class="likes" onclick="addLike('<%= post._id %>')">
            <img id="like-icon-<%= post._id %>" src="/icons/liked.png" alt="" />
            <p class="like-count" id="like-count-<%= post._id %>"><%= post.likes %></p>
          </div>
          <div class="comment" onclick="fetchComments('<%= post._id %>')">
            <img src="/icons/comment.gif" alt=""> <%= post.comments %>
          </div>
        </div>
        <div class="c-i-right">
          <div class="share" onclick="sharePost('<%= post._id %>')" style="min-width:50px">
            <span class="money-need" style="font-size:22px">share</span>
          </div>
        </div>
      </div>
    </div>
    <% }); %>
  </div>

    <!-- Full-Screen Image Display (simplified) -->
    <div id="fullScreenImageContainer" class="image-overlay" onclick="closeFullscreenImage()">
      <img id="fullScreenImage" src="" alt="Full screen view" />
    </div>

    <div id="loading-overlay">
      <div class="loader">
        <div class="box-load1"></div>
        <div class="box-load2"></div>
        <div class="box-load3"></div>
      </div>
    </div>

    <%
 function timeAgo(isoDate) {
    const timeUnits = [
      { label: "year", seconds: 31536000 },
      { label: "month", seconds: 2592000 },
      { label: "day", seconds: 86400 },
      { label: "hour", seconds: 3600 },
      { label: "minute", seconds: 60 }
    ];
    const now = new Date();
    const past = new Date(isoDate);
    const diffInSeconds = Math.floor((now - past) / 1000);
    for (let unit of timeUnits) {
      const interval = Math.floor(diffInSeconds / unit.seconds);
      if (interval >= 1) {
        return `${interval} ${unit.label}${interval > 1 ? "s" : ""} ago`;
      }
    }
    return "just now";
  }
    %>



    <script>
      function initLikedPosts() {
        const postsContainer = document.getElementById("posts");
        let skipCount = 10;
        const loadMoreButtonCooldown = 8000;
        let loadMoreButtonEnabled = true;
        let isLoading = false;

        async function fetchAndRenderLikedPosts() {
          if (isLoading) return;
          isLoading = true;
          try {
            const response = await fetch(`/user/liked-posts?skip=${skipCount}&limit=10`);
            const html = await response.text();

            // Create temporary container to parse new posts
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = html;

            // Extract posts and pagination button
            const newPosts = tempDiv.querySelector('#posts').innerHTML;
            const newButton = tempDiv.querySelector('#loadMoreButton');

            // Append new posts
            postsContainer.insertAdjacentHTML('beforeend', newPosts);

            // Update pagination button
            const existingButton = document.getElementById('loadMoreButton');
            if (newButton) {
              if (existingButton) {
                existingButton.replaceWith(newButton);
              } else {
                postsContainer.after(newButton);
              }
            } else if (existingButton) {
              existingButton.remove();
            }

            skipCount += 10;
            manageLoadMoreButton(10);
            document.getElementById('loading-overlay').style.display = 'none';
          } catch (error) {
            console.error("Error fetching posts:", error);
          } finally {
            isLoading = false;
          }
        }
        function manageLoadMoreButton(postsLoaded) {
        let loadMoreButton = document.getElementById("loadMoreButton");
        if (!loadMoreButton && postsLoaded === 10) {
          loadMoreButton = document.createElement("button");
          loadMoreButton.id = "loadMoreButton";
          loadMoreButton.textContent = "Load More";
          loadMoreButton.addEventListener("click", handleLoadMoreClick);
          postsContainer.appendChild(loadMoreButton);
        } else if (loadMoreButton && postsLoaded < 10) {
          loadMoreButton.remove();
        } else if (loadMoreButton) {
          // Ensure button stays at the end
          postsContainer.appendChild(loadMoreButton);
        }
      }
  
        function handleLoadMoreClick() {
          if (loadMoreButtonEnabled) {
            loadMoreButtonEnabled = false;
            const loadMoreButton = document.getElementById("loadMoreButton");
            if (loadMoreButton) {
              loadMoreButton.textContent = "Loading...";
              loadMoreButton.style.color = "#7f7f7f";
              fetchAndRenderLikedPosts().then(() => {
                loadMoreButton.textContent = "Load More";
                loadMoreButtonEnabled = true;
              });
              loadMoreButton.disabled = true;
              setTimeout(() => {
                if (loadMoreButton) {
                  loadMoreButton.disabled = false;
                  loadMoreButton.style.color = "white";
                }
              }, loadMoreButtonCooldown);
            }
          }
        }

        // Event listeners
        const loadMoreButton = document.getElementById("loadMoreButton");
        if (loadMoreButton) {
          loadMoreButton.addEventListener("click", handleLoadMoreClick);
        }

        window.addEventListener("scroll", () => {
          const scrollPosition = window.scrollY + window.innerHeight;
          const documentHeight = document.documentElement.scrollHeight;
          if (scrollPosition >= documentHeight * 0.9 && !isLoading) {
            fetchAndRenderLikedPosts();
          }
        });
      }

      // Initialize when DOM is loaded
      document.addEventListener("DOMContentLoaded", initLikedPosts);
    </script>
</body>

</html>